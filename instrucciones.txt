#### Instalacion de tailwind

-después de crear el proyecto

1- Instalar "tailwindcss" y sus dependencias vía npm
    npm install -D tailwindcss postcss autoprefixer

2- ejecutar el comando init para generar los archivos 'tailwind.config.js' y 'postcss.config.js'

3- configurar los archivos de plantilla en el archivo 'tailwind.config.js'

    module.exports = {
    content: [
        "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
        extend: {},
    },
    plugins: [],
    }

4- agregar las directivas '@tailwind' para cada uno de las capas de Tailwind a tu archivo './src/index.css'

    @tailwind base;
    @tailwind components;
    @tailwind utilities;

5- ejecutar el proceso de complicación con
    npm run start

6- Empiece a utilizar las clases de Tailwind para dar estilo a sus componentes. 
    export default function App() {
    return (
        <h1 className="text-3xl font-bold underline">
            Hello world!
        </h1>
        )
    }


7- ejemplo del utilizado en el proyecto de syncfusion
module.exports = {
    content: ['./src/**/*.{js,jsx,ts,tsx}'],
    darkMode: 'class',
    theme: {
      fontFamily: {
        display: ['Open Sans', 'sans-serif'],
        body: ['Open Sans', 'sans-serif'],
      },
      extend: {
        fontSize: {
          14: '14px',
        },
        backgroundColor: {
          'main-bg': '#FAFBFB',
          'main-dark-bg': '#20232A',
          'secondary-dark-bg': '#33373E',
          'light-gray': '#F7F7F7',
          'half-transparent': 'rgba(0, 0, 0, 0.5)',
        },
        borderWidth: {
          1: '1px',
        },
        borderColor: {
          color: 'rgba(0, 0, 0, 0.1)',
        },
        width: {
          400: '400px',
          760: '760px',
          780: '780px',
          800: '800px',
          1000: '1000px',
          1200: '1200px',
          1400: '1400px',
        },
        height: {
          80: '80px',
        },
        minHeight: {
          590: '590px',
        },
        backgroundImage: {
          'hero-pattern':
            "url('https://demos.wrappixel.com/premium-admin-templates/react/flexy-react/main/static/media/welcome-bg-2x-svg.25338f53.svg')",
        },
      },
    },
    plugins: [],
  };


####Creacion de directorios
Crear los directorios base

src
->components
->contexts
->data
->pages
App.css
App.js
index.css
index.js



####Instalación e inicialización de React Router DOM

1- instalar react router DOM    
    npm install react-router-DOM

2- importar browserrouter, routes y route

    import {BrowserRouter, Routes, Route} from 'react-router-dom';

3- ejemplo 1 de uso de router dentro del App.js:

    <BrowserRouter>
        <Routes>
            <Route exact path="/" elemnt={<HomePage/>}/>
            <Route path="/about" element={<AboutPage/>}/>
            <Route path="/proyectos" element={<ProyectsPage/>}/>
            <Route path="/proyectos/:id_proyecto" element={<ProyectPage/>}/>
            <Route path="*" element={<NotFoundPage/>}/>
        </Routes>
    </BrowserRouter>



####Creación del contexto 
1- en la ruta contexts usualmente crear el archivo que proporcionará el contexto usualmente ContextProvider.jsx
    
2- importar createContext, useContext, useState de 'react'
    import React, {createContext, useContext, useState} from 'react'


3. crear el contexto
    const StateContext = createContext();

4- exportar el proveedor del contexto con su children

    export const ContextProvider= ({children}) => {
        
        return (
            <Statecontext.Provider
                value={{
                    //incluir estados o funciones que se mantendrán en el contexto por ejemplo...
                    activeMenu,
                    isclicked,
                    setIsClicked,
                    setActiveMenu
                    currentMode, 
                    setMode,
                }}
            >
            {children}
            </Statecontext.Provider>
        );
    };

5- exportar el hook useStateContext enviado el contexto
    export const useStatecontext = () => useContext(StateContext);

6- ejemplo del archivo ContextProvider.js

    import React, {createContext, useContext, useState} from 'react'
    const StateContext = createContext();
    export const ContextProvider= ({children}) => {
        
        return (
            <Statecontext.Provider
                value={{
                    //incluir estados o funciones que se mantendrán en el contexto por ejemplo...
                    activeMenu,
                    isclicked,
                    setIsClicked,
                    setActiveMenu
                    currentMode, 
                    setMode,
                }}
            >
            {children}
            </Statecontext.Provider>
        );
    };

    export const useStatecontext = () => useContext(StateContext);

8- envolver el componente app con el ContextProvider

    import {ContextProvider} from './contexts/ContextProvider';

    <ContextProvider>
        <App />
    </ContextProvider>

7- uso del contexto 

    en el componente que se utilizará el contexto importar useStateContext

        import {useStateContext} from './contexts/ContextProvider';    //context es la ruta donde se guardó el archivo.

    deconstruir el useStateContext para los valores que se necesiten. 

        const {activeMenu, setActiveMenu} = useStateContext();

    y utilizarlos como se programe ya sea para consultar el valor o para utilizar las funciones. 



    <button onClick={()=>setActiveMenu(true)}>
        Menu
    </button>


    -------

    {activeMenu? dothis : dothisthen}

    -------
    {activeMenu && <Menu />}
